require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ClientCashesController do
  fixtures :freeswitches
  fixtures :public_carriers
  fixtures :clients


  # This should return the minimal set of attributes required to create a valid
  # ClientCash. As you add validations to ClientCash, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {:client_id => 1, :amount => 0.0}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ClientCashesController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all client_cashes as @client_cashes" do
      client_cash = ClientCash.create! valid_attributes
      get :index, {}, valid_session
      assigns(:client_cashes).should_not be_nil
    end
  end

  describe "GET show" do
    it "assigns the requested client_cash as @client_cash" do
      client_cash = ClientCash.create! valid_attributes
      get :show, {:id => client_cash.to_param}, valid_session
      assigns(:client_cash).should eq(client_cash)
    end
  end

  describe "GET new" do
    it "assigns a new client_cash as @client_cash" do
      get :new, {}, valid_session
      assigns(:client_cash).should be_a_new(ClientCash)
    end
  end

  describe "GET edit" do
    it "assigns the requested client_cash as @client_cash" do
      client_cash = ClientCash.create! valid_attributes
      get :edit, {:id => client_cash.to_param}, valid_session
      assigns(:client_cash).should eq(client_cash)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new ClientCash" do
        expect {
          post :create, {:client_cash => valid_attributes}, valid_session
        }.to change(ClientCash, :count).by(1)
      end

      it "assigns a newly created client_cash as @client_cash" do
        post :create, {:client_cash => valid_attributes}, valid_session
        assigns(:client_cash).should be_a(ClientCash)
        assigns(:client_cash).should be_persisted
      end

      it "redirects to the created client_cash" do
        post :create, {:client_cash => valid_attributes}, valid_session
        response.should redirect_to(ClientCash.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved client_cash as @client_cash" do
        # Trigger the behavior that occurs when invalid params are submitted
        ClientCash.any_instance.stub(:save).and_return(false)
        post :create, {:client_cash => {}}, valid_session
        assigns(:client_cash).should be_a_new(ClientCash)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        ClientCash.any_instance.stub(:save).and_return(false)
        post :create, {:client_cash => {}}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do

    describe "with valid params" do
      it "updates the requested client_cash" do
        client_cash = ClientCash.create! valid_attributes
        # Assuming there are no other client_cashes in the database, this
        # specifies that the ClientCash created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        ClientCash.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => client_cash.to_param, :client_cash => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested client_cash as @client_cash" do
        client_cash = ClientCash.create! valid_attributes
        put :update, {:id => client_cash.to_param, :client_cash => valid_attributes}, valid_session
        assigns(:client_cash).should eq(client_cash)
      end

      it "redirects to the client_cash" do
        client_cash = ClientCash.create! valid_attributes
        put :update, {:id => client_cash.to_param, :client_cash => valid_attributes}, valid_session
        response.should redirect_to(client_cash)
      end
    end

    describe "with invalid params" do
      it "assigns the client_cash as @client_cash" do
        client_cash = ClientCash.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        ClientCash.any_instance.stub(:save).and_return(false)
        put :update, {:id => client_cash.to_param, :client_cash => {}}, valid_session
        assigns(:client_cash).should eq(client_cash)
      end

      it "re-renders the 'edit' template" do
        client_cash = ClientCash.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        ClientCash.any_instance.stub(:save).and_return(false)
        put :update, {:id => client_cash.to_param, :client_cash => {}}, valid_session
        response.should render_template("edit")
      end
    end
    
    describe "balance client" do
      
      it "should increment balance" do
        client_cash = ClientCash.create! valid_attributes
        expect {
          put :update, {:id => client_cash.id, :client_cash => {:amount => 10.0, :client_id => client_cash.client_id}}
          client_cash.reload
        }.to change{
          client_cash.client.balance
        }.by(10.0)
      end

      it "should decrement balance" do
        client = Client.find_by_id(valid_attributes[:client_id])
        client_cash = ClientCash.create! valid_attributes
        client_cash.update_attribute(:amount, 43.0)

        expect {
          put :update, {:id => client_cash.id, :client_cash => {:amount => 30.0, :client_id => client_cash.client_id}}
          client_cash.reload
        }.to change{ client_cash.client.balance}.by(-13.0)
      end
    end

  end

  describe "DELETE destroy" do
    it "destroys the requested client_cash" do
      client_cash = ClientCash.create! valid_attributes
      expect {
        delete :destroy, {:id => client_cash.to_param}, valid_session
      }.to change(ClientCash, :count).by(-1)
    end

    it "redirects to the client_cashes list" do
      client_cash = ClientCash.create! valid_attributes
      delete :destroy, {:id => client_cash.to_param}, valid_session
      response.should redirect_to(client_cashes_url)
    end
  end


end
